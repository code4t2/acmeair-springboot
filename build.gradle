
task wrapper(type: Wrapper) {
   gradleVersion = '2.6'
}

buildscript {
  ext {
    springBootVersion = '1.3.2.BUILD-SNAPSHOT'
    springCloudVersion = '1.0.4.RELEASE'
  }
  repositories {
    // NOTE: You should declare only repositories that you need here
    mavenLocal()
    mavenCentral()
    maven { url "http://repo.spring.io/release" }
    maven { url "http://repo.spring.io/milestone" }
    maven { url "http://repo.spring.io/snapshot" }
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
  }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    repositories {
        mavenCentral()
        mavenLocal()
        maven { url "http://repo.spring.io/release" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/snapshot" }
    }

    dependencies {
        compile 'javax:javaee-web-api:7.0'
    }
}

project(':acmeair-common') {
}

project(':acmeair-services') {
    dependencies {
        compile project(':acmeair-common')
        compile 'com.googlecode.json-simple:json-simple:1.1.1'
        compile 'javax.enterprise:cdi-api:1.2'
        compile 'org.springframework:spring-aop:4.2.4.RELEASE'
        compile 'org.springframework:spring-context:4.2.4.RELEASE'
    }
}

project(':acmeair-services-wxs') {
    dependencies {
        compile project(':acmeair-common')
        compile project(':acmeair-services')
        compile 'com.ibm.websphere.objectgrid:objectgrid:8.6.0.2'
    }
}



project(':acmeair-services-morphia') {
    dependencies {
        compile project(':acmeair-common')
        compile project(':acmeair-services')
        compile 'org.mongodb:mongo-java-driver:3.2.0'
        compile 'org.mongodb.morphia:morphia:1.0.1'
        compile 'org.springframework:spring-aop:4.2.4.RELEASE'
        compile 'org.springframework:spring-context:4.2.4.RELEASE'
    }
}


project(':acmeair-loader') {
    dependencies {
        compile project(':acmeair-common')
        compile project(':acmeair-services')
        compile 'org.springframework:spring-context:4.2.4.RELEASE'
    }
}


project(':acmeair-webapp') {
    apply plugin: 'spring-boot'
    apply plugin: 'war'

    dependencies {
        compile project(':acmeair-common')
        compile project(':acmeair-services')
        compile project(':acmeair-loader')
        compile 'javax.enterprise:cdi-api:1.2'
        compile("org.springframework.boot:spring-boot-starter-jersey")
        compile("org.springframework.boot:spring-boot-starter-actuator")
        providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")

        def includeService = "ALL"
        if (project.hasProperty('service') ) {
           println "property service exists and has a value of $service "
           includeService = service
        } else {
           println "property service was not set. Using the default value of $includeService"
           println "   To pick a specific service set the service property using the -P parameter, for example gradlew -Pservice=morphia build " 
        }

        if ("$includeService".equalsIgnoreCase("morphia") || "$includeService".equalsIgnoreCase("ALL")) {
           println "Including mongoDB morphia service "
           compile (project(':acmeair-services-morphia')) {
              transitive = false
           }
 
           compile ('org.mongodb.morphia:morphia:0.110')  {
              transitive = false
           }
        }

        if ("$includeService".equalsIgnoreCase("wxs") || "$includeService".equalsIgnoreCase("ALL")) {
           println "Including WXS service "

           compile project(':acmeair-services-wxs')
           providedRuntime 'com.ibm.websphere.objectgrid:objectgrid:8.6.0.2'
        }

        providedRuntime 'javax:javaee-web-api:7.0'
    }
}

